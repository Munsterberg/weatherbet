"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const h = __importStar(require("../src/helpersV2"));
const matchersV2_1 = require("../src/matchersV2");
const ethers_1 = require("ethers");
const wallet_1 = require("../src/wallet");
const ConcreteSignedSafeMathFactory_1 = require("../src/generated/ConcreteSignedSafeMathFactory");
const ganache_core_1 = __importDefault(require("ganache-core"));
const concreteSignedSafeMathFactory = new ConcreteSignedSafeMathFactory_1.ConcreteSignedSafeMathFactory();
const provider = new ethers_1.ethers.providers.Web3Provider(ganache_core_1.default.provider());
let defaultAccount;
beforeAll(async () => {
    const { wallet } = await wallet_1.createFundedWallet(provider, 0);
    defaultAccount = wallet;
});
describe('SignedSafeMath', () => {
    // a version of the adder contract where we make all ABI exposed functions constant
    // TODO: submit upstream PR to support constant contract type generation
    let adder;
    let response;
    const INT256_MAX = ethers_1.ethers.utils.bigNumberify('57896044618658097711785492504343953926634992332820282019728792003956564819967');
    const INT256_MIN = ethers_1.ethers.utils.bigNumberify('-57896044618658097711785492504343953926634992332820282019728792003956564819968');
    const deployment = h.useSnapshot(provider, async () => {
        adder = await concreteSignedSafeMathFactory.connect(defaultAccount).deploy();
    });
    beforeEach(async () => {
        await deployment();
    });
    describe('#add', () => {
        describe('given a positive and positive', () => {
            it('works', async () => {
                response = await adder.testAdd(1, 2);
                matchersV2_1.assertBigNum(3, response);
            });
            it('works with zero', async () => {
                response = await adder.testAdd(INT256_MAX, 0);
                matchersV2_1.assertBigNum(INT256_MAX, response);
            });
            describe('when both are large enough to overflow', () => {
                it('throws', async () => {
                    await h.assertActionThrows(async () => {
                        response = await adder.testAdd(INT256_MAX, 1);
                    });
                });
            });
        });
        describe('given a negative and negative', () => {
            it('works', async () => {
                response = await adder.testAdd(-1, -2);
                matchersV2_1.assertBigNum(-3, response);
            });
            it('works with zero', async () => {
                response = await adder.testAdd(INT256_MIN, 0);
                matchersV2_1.assertBigNum(INT256_MIN, response);
            });
            describe('when both are large enough to overflow', () => {
                it('throws', async () => {
                    await h.assertActionThrows(async () => {
                        await adder.testAdd(INT256_MIN, -1);
                    });
                });
            });
        });
        describe('given a positive and negative', () => {
            it('works', async () => {
                response = await adder.testAdd(1, -2);
                matchersV2_1.assertBigNum(-1, response);
            });
        });
        describe('given a negative and positive', () => {
            it('works', async () => {
                response = await adder.testAdd(-1, 2);
                matchersV2_1.assertBigNum(1, response);
            });
        });
    });
});
//# sourceMappingURL=SignedSafeMath.test.js.map