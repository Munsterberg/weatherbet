/// <reference types="node" />
import BN from 'bn.js';
export declare const eth: import("web3/eth").default;
export interface Roles {
    defaultAccount: string;
    oracleNode: string;
    oracleNode1: string;
    oracleNode2: string;
    oracleNode3: string;
    stranger: string;
    consumer: string;
}
export interface Personas {
    Default: string;
    Neil: string;
    Ned: string;
    Nelly: string;
    Carol: string;
    Eddy: string;
}
interface RolesAndPersonas {
    roles: Roles;
    personas: Personas;
}
/**
 * Generate roles and personas for tests along with their corrolated account addresses
 */
export declare function initializeRolesAndPersonas(): Promise<RolesAndPersonas>;
export declare const wrappedERC20: (contract: any) => any;
export declare const linkContract: (account: string) => Promise<any>;
export declare const bigNum: (num: any) => BN;
export declare const toWei: (num: string | number) => any;
export declare const toUtf8: (val: any) => string;
export declare const keccak: (val: string, val2?: string | undefined, val3?: string | undefined, val4?: string | undefined, val5?: string | undefined) => string;
export declare const hexToInt: (str: string) => any;
export declare const toHexWithoutPrefix: (arg: any) => string;
export declare const toHex: (value: any) => string;
export declare function Ox(value: any): string;
export declare const isByteRepresentation: (h: any) => boolean;
export declare const getEvents: (contract: any) => Promise<any[]>;
export declare const getLatestEvent: (contract: any) => Promise<any[]>;
export declare const requestDataFrom: (oc: any, link: any, amount: any, args: any, options: any) => any;
export declare const functionSelector: (signature: any) => string;
export declare const assertActionThrows: (action: any) => Promise<void>;
export declare const checkPublicABI: (contract: any, expectedPublic: any) => void;
export declare const decodeRunABI: (log: any) => any;
export declare const decodeRunRequest: (log: any) => any;
export declare const decodeDietCBOR: (data: any) => any;
export declare const runRequestId: (log: any) => any;
export declare const requestDataBytes: (specId: any, to: any, fHash: any, nonce: any, data: any) => any;
export declare function abiEncode(types: any, values: any): string;
export declare const newUint8ArrayFromStr: (str: string) => Uint8Array;
export declare const newUint8Array: (str: string, count: number) => any;
export declare const newSignature: (str: string) => any;
export declare function newHash(str: string): Uint8Array;
export declare const newAddress: (str: string) => Uint8Array;
export declare const lengthTypedArrays: <T>(...arrays: ArrayLike<T>[]) => number;
export declare const toBuffer: (uint8a: Uint8Array) => Buffer;
export declare const concatTypedArrays: <T>(...arrays: ArrayLike<T>[]) => ArrayLike<T>;
export declare const increaseTime5Minutes: () => Promise<void>;
export declare const sendToEvm: (evmMethod: string, ...params: any) => Promise<void>;
export declare const mineBlocks: (blocks: number) => Promise<void>;
export declare const createTxData: (selector: string, types: any, values: any) => any;
export declare const generateSAID: ({ payment, expiration, endAt, oracles, requestDigest, }: any) => Uint8Array;
export declare const recoverPersonalSignature: (message: Uint8Array, signature: any) => any;
export declare const personalSign: (account: any, message: any) => Promise<any>;
export declare const executeServiceAgreementBytes: (sAID: any, to: any, fHash: any, nonce: any, data: any) => any;
export declare const strip0x: (s: string) => string;
export declare const padHexTo256Bit: (s: string) => string;
export declare const padNumTo256Bit: (n: number) => string;
export declare const constructStructArgs: (fieldNames: string[], values: any[]) => any;
export declare const initiateServiceAgreementArgs: ({ payment, expiration, endAt, oracles, oracleSignatures, requestDigest, }: any) => any[];
export declare const initiateServiceAgreementCall: (coordinator: any, args: any) => Promise<any>;
/** Call coordinator contract to initiate the specified service agreement. */
export declare const initiateServiceAgreement: (coordinator: any, args: any) => Promise<any>;
/** Check that the given service agreement was stored at the correct location */
export declare const checkServiceAgreementPresent: (coordinator: any, { payment, expiration, endAt, requestDigest, id }: any) => Promise<any>;
export declare const checkServiceAgreementAbsent: (coordinator: any, serviceAgreementID: any) => Promise<void>;
export declare const newServiceAgreement: (params: any) => Promise<any>;
export declare function sixMonthsFromNow(): number;
export declare const fulfillOracleRequest: (oracle: any, request: any, response: any, options: any) => Promise<any>;
export declare const cancelOracleRequest: (oracle: any, request: any, options: any) => Promise<any>;
export {};
