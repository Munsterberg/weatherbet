/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface AggregatorProxyInterface extends Interface {
  functions: {
    aggregator: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    currentAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    destroy: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;

    setAggregator: TypedFunctionDescription<{
      encode([_aggregator]: [string]): string;
    }>;

    updatedHeight: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    OwnershipRenounced: TypedEventDescription<{
      encodeTopics([previousOwner]: [string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class AggregatorProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): AggregatorProxy;
  attach(addressOrName: string): AggregatorProxy;
  deployed(): Promise<AggregatorProxy>;

  on(event: EventFilter | string, listener: Listener): AggregatorProxy;
  once(event: EventFilter | string, listener: Listener): AggregatorProxy;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AggregatorProxy;
  removeAllListeners(eventName: EventFilter | string): AggregatorProxy;
  removeListener(eventName: any, listener: Listener): AggregatorProxy;

  interface: AggregatorProxyInterface;

  functions: {
    aggregator(): Promise<string>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    currentAnswer(): Promise<BigNumber>;

    destroy(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    owner(): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAggregator(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updatedHeight(): Promise<BigNumber>;
  };

  aggregator(): Promise<string>;

  renounceOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  currentAnswer(): Promise<BigNumber>;

  destroy(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  owner(): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAggregator(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updatedHeight(): Promise<BigNumber>;

  filters: {
    OwnershipRenounced(previousOwner: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    aggregator(): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    currentAnswer(): Promise<BigNumber>;

    destroy(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    transferOwnership(_newOwner: string): Promise<BigNumber>;

    setAggregator(_aggregator: string): Promise<BigNumber>;

    updatedHeight(): Promise<BigNumber>;
  };
}
