/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface AggregatorInterface extends Interface {
  functions: {
    authorizedRequesters: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;

    jobIds: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    minimumResponses: TypedFunctionDescription<{ encode([]: []): string }>;

    oracles: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    latestCompletedAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    currentAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    paymentAmount: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_newOwner]: [string]): string;
    }>;

    updatedHeight: TypedFunctionDescription<{ encode([]: []): string }>;

    requestRateUpdate: TypedFunctionDescription<{ encode([]: []): string }>;

    chainlinkCallback: TypedFunctionDescription<{
      encode([_clRequestId, _response]: [Arrayish, BigNumberish]): string;
    }>;

    updateRequestDetails: TypedFunctionDescription<{
      encode([_paymentAmount, _minimumResponses, _oracles, _jobIds]: [
        BigNumberish,
        BigNumberish,
        (string)[],
        (Arrayish)[]
      ]): string;
    }>;

    transferLINK: TypedFunctionDescription<{
      encode([_recipient, _amount]: [string, BigNumberish]): string;
    }>;

    setAuthorization: TypedFunctionDescription<{
      encode([_requester, _allowed]: [string, boolean]): string;
    }>;

    cancelRequest: TypedFunctionDescription<{
      encode([_requestId, _payment, _expiration]: [
        Arrayish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    destroy: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    ResponseReceived: TypedEventDescription<{
      encodeTopics([response, answerId, sender]: [
        BigNumberish | null,
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    AnswerUpdated: TypedEventDescription<{
      encodeTopics([current, answerId]: [
        BigNumberish | null,
        BigNumberish | null
      ]): string[];
    }>;

    OwnershipRenounced: TypedEventDescription<{
      encodeTopics([previousOwner]: [string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    ChainlinkRequested: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkFulfilled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkCancelled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;
  };
}

export class Aggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Aggregator;
  attach(addressOrName: string): Aggregator;
  deployed(): Promise<Aggregator>;

  on(event: EventFilter | string, listener: Listener): Aggregator;
  once(event: EventFilter | string, listener: Listener): Aggregator;
  addListener(eventName: EventFilter | string, listener: Listener): Aggregator;
  removeAllListeners(eventName: EventFilter | string): Aggregator;
  removeListener(eventName: any, listener: Listener): Aggregator;

  interface: AggregatorInterface;

  functions: {
    authorizedRequesters(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    jobIds(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    minimumResponses(overrides?: TransactionOverrides): Promise<BigNumber>;

    oracles(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    latestCompletedAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    currentAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    paymentAmount(overrides?: TransactionOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updatedHeight(overrides?: TransactionOverrides): Promise<BigNumber>;

    requestRateUpdate(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    chainlinkCallback(
      _clRequestId: Arrayish,
      _response: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateRequestDetails(
      _paymentAmount: BigNumberish,
      _minimumResponses: BigNumberish,
      _oracles: (string)[],
      _jobIds: (Arrayish)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferLINK(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAuthorization(
      _requester: string,
      _allowed: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancelRequest(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    destroy(overrides?: TransactionOverrides): Promise<ContractTransaction>;
  };

  authorizedRequesters(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  jobIds(arg0: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

  minimumResponses(overrides?: TransactionOverrides): Promise<BigNumber>;

  oracles(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  latestCompletedAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  currentAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  paymentAmount(overrides?: TransactionOverrides): Promise<BigNumber>;

  transferOwnership(
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updatedHeight(overrides?: TransactionOverrides): Promise<BigNumber>;

  requestRateUpdate(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  chainlinkCallback(
    _clRequestId: Arrayish,
    _response: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateRequestDetails(
    _paymentAmount: BigNumberish,
    _minimumResponses: BigNumberish,
    _oracles: (string)[],
    _jobIds: (Arrayish)[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferLINK(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAuthorization(
    _requester: string,
    _allowed: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancelRequest(
    _requestId: Arrayish,
    _payment: BigNumberish,
    _expiration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  destroy(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  filters: {
    ResponseReceived(
      response: BigNumberish | null,
      answerId: BigNumberish | null,
      sender: string | null
    ): EventFilter;

    AnswerUpdated(
      current: BigNumberish | null,
      answerId: BigNumberish | null
    ): EventFilter;

    OwnershipRenounced(previousOwner: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ChainlinkRequested(id: Arrayish | null): EventFilter;

    ChainlinkFulfilled(id: Arrayish | null): EventFilter;

    ChainlinkCancelled(id: Arrayish | null): EventFilter;
  };

  estimate: {
    authorizedRequesters(arg0: string): Promise<BigNumber>;

    jobIds(arg0: BigNumberish): Promise<BigNumber>;

    minimumResponses(): Promise<BigNumber>;

    oracles(arg0: BigNumberish): Promise<BigNumber>;

    latestCompletedAnswer(): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    currentAnswer(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    paymentAmount(): Promise<BigNumber>;

    transferOwnership(_newOwner: string): Promise<BigNumber>;

    updatedHeight(): Promise<BigNumber>;

    requestRateUpdate(): Promise<BigNumber>;

    chainlinkCallback(
      _clRequestId: Arrayish,
      _response: BigNumberish
    ): Promise<BigNumber>;

    updateRequestDetails(
      _paymentAmount: BigNumberish,
      _minimumResponses: BigNumberish,
      _oracles: (string)[],
      _jobIds: (Arrayish)[]
    ): Promise<BigNumber>;

    transferLINK(_recipient: string, _amount: BigNumberish): Promise<BigNumber>;

    setAuthorization(_requester: string, _allowed: boolean): Promise<BigNumber>;

    cancelRequest(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _expiration: BigNumberish
    ): Promise<BigNumber>;

    destroy(): Promise<BigNumber>;
  };
}
