/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LinkExInterface extends Interface {
  functions: {
    VALID_BLOCKS: TypedFunctionDescription<{ encode([]: []): string }>;

    authorizedNodes: TypedFunctionDescription<{ encode([]: [string]): string }>;

    update: TypedFunctionDescription<{
      encode([_rate]: [BigNumberish]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    addOracle: TypedFunctionDescription<{
      encode([_oracle]: [string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    currentRate: TypedFunctionDescription<{ encode([]: []): string }>;

    removeOracle: TypedFunctionDescription<{
      encode([_oracle]: [string]): string;
    }>;
  };

  events: {
    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class LinkEx extends Contract {
  connect(signerOrProvider: Signer | Provider | string): LinkEx;
  attach(addressOrName: string): LinkEx;
  deployed(): Promise<LinkEx>;

  on(event: EventFilter | string, listener: Listener): LinkEx;
  once(event: EventFilter | string, listener: Listener): LinkEx;
  addListener(eventName: EventFilter | string, listener: Listener): LinkEx;
  removeAllListeners(eventName: EventFilter | string): LinkEx;
  removeListener(eventName: any, listener: Listener): LinkEx;

  interface: LinkExInterface;

  functions: {
    VALID_BLOCKS(): Promise<BigNumber>;

    authorizedNodes(arg0: string): Promise<boolean>;

    update(
      _rate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(): Promise<string>;

    isOwner(): Promise<boolean>;

    addOracle(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    currentRate(): Promise<BigNumber>;

    removeOracle(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  VALID_BLOCKS(): Promise<BigNumber>;

  authorizedNodes(arg0: string): Promise<boolean>;

  update(
    _rate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(): Promise<string>;

  isOwner(): Promise<boolean>;

  addOracle(
    _oracle: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  currentRate(): Promise<BigNumber>;

  removeOracle(
    _oracle: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    VALID_BLOCKS(): Promise<BigNumber>;

    authorizedNodes(arg0: string): Promise<BigNumber>;

    update(_rate: BigNumberish): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    isOwner(): Promise<BigNumber>;

    addOracle(_oracle: string): Promise<BigNumber>;

    transferOwnership(newOwner: string): Promise<BigNumber>;

    currentRate(): Promise<BigNumber>;

    removeOracle(_oracle: string): Promise<BigNumber>;
  };
}
